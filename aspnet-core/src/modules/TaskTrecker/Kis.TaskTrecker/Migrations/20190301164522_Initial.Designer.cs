// <auto-generated />
using System;
using Kis.TaskTrecker.Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Kis.TaskTrecker.Migrations
{
    [DbContext(typeof(TaskTreckerDbContext))]
    [Migration("20190301164522_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:uuid-ossp", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Kis.TaskTrecker.Api.Entity.Issue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("Dedline")
                        .HasColumnName("dedline");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnName("deleted_date");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<Guid?>("LastCommentUserId")
                        .HasColumnName("last_comment_user_id");

                    b.Property<DateTime?>("LastRead")
                        .HasColumnName("last_read");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date");

                    b.Property<Guid?>("ParentId")
                        .HasColumnName("parent_id");

                    b.Property<Guid?>("PerformerId")
                        .HasColumnName("performer_id");

                    b.Property<long?>("PlannedTime")
                        .HasColumnName("planned_time");

                    b.Property<Guid>("PriorityId")
                        .HasColumnName("priority_id");

                    b.Property<Guid>("ProjectId")
                        .HasColumnName("project_id");

                    b.Property<Guid>("StateId")
                        .HasColumnName("state_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StateId");

                    b.ToTable("issues","task_tracker");
                });

            modelBuilder.Entity("Kis.TaskTrecker.Api.Entity.IssueComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CommentId")
                        .HasColumnName("comment_id");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnName("deleted_date");

                    b.Property<Guid>("IssueId")
                        .HasColumnName("issue_id");

                    b.Property<Guid?>("IssueId1");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date");

                    b.Property<Guid>("StateId")
                        .HasColumnName("issue_state_id");

                    b.Property<long?>("WorkTime")
                        .HasColumnName("work_time");

                    b.HasKey("Id");

                    b.HasIndex("IssueId");

                    b.HasIndex("IssueId1");

                    b.HasIndex("StateId");

                    b.ToTable("issue_comments","task_tracker");
                });

            modelBuilder.Entity("Kis.TaskTrecker.Api.Entity.IssueMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnName("deleted_date");

                    b.Property<Guid>("IssueId")
                        .HasColumnName("issue_id");

                    b.Property<Guid>("MediaId")
                        .HasColumnName("media_id");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date");

                    b.HasKey("Id");

                    b.HasIndex("IssueId");

                    b.ToTable("issue_medias","task_tracker");
                });

            modelBuilder.Entity("Kis.TaskTrecker.Api.Entity.IssuePriority", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnName("deleted_date");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("issue_priorities","task_tracker");
                });

            modelBuilder.Entity("Kis.TaskTrecker.Api.Entity.IssueState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnName("deleted_date");

                    b.Property<Guid>("IssueId")
                        .HasColumnName("issue_id");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date");

                    b.Property<Guid>("StateId")
                        .HasColumnName("state_id");

                    b.HasKey("Id");

                    b.HasIndex("IssueId");

                    b.ToTable("issue_states","task_tracker");
                });

            modelBuilder.Entity("Kis.TaskTrecker.Api.Entity.IssueWorkflow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnName("deleted_date");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date");

                    b.Property<Guid>("ProjectId")
                        .HasColumnName("project_id");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnName("worklow_id");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("issue_workflows","task_tracker");
                });

            modelBuilder.Entity("Kis.TaskTrecker.Api.Entity.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnName("deleted_date");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("Gant")
                        .HasColumnName("gant");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnName("manager_id");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date");

                    b.Property<Guid>("ProjectStateId")
                        .HasColumnName("project_state_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("ProjectStateId");

                    b.ToTable("projects","task_tracker");
                });

            modelBuilder.Entity("Kis.TaskTrecker.Api.Entity.ProjectMilestone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnName("deleted_date");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnName("tag");

                    b.HasKey("Id");

                    b.ToTable("project_milestones","task_tracker");
                });

            modelBuilder.Entity("Kis.TaskTrecker.Api.Entity.ProjectMilestoneIssueRel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnName("deleted_date");

                    b.Property<Guid>("IssueId")
                        .HasColumnName("issue_id");

                    b.Property<Guid>("MilestoneId")
                        .HasColumnName("project_milestone_id");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date");

                    b.HasKey("Id");

                    b.HasIndex("IssueId");

                    b.HasIndex("MilestoneId");

                    b.ToTable("project_milestone_issue_rels","task_tracker");
                });

            modelBuilder.Entity("Kis.TaskTrecker.Api.Entity.ProjectState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnName("deleted_date");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date");

                    b.Property<Guid>("StateId")
                        .HasColumnName("state_id");

                    b.HasKey("Id");

                    b.ToTable("project_states","task_tracker");
                });

            modelBuilder.Entity("Kis.TaskTrecker.Api.Entity.ProjectWorkflow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnName("deleted_date");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnName("modified_date");

                    b.Property<Guid>("ProjectId")
                        .HasColumnName("project_id");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnName("worklow_id");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("project_workflows","task_tracker");
                });

            modelBuilder.Entity("Kis.TaskTrecker.Api.Entity.Issue", b =>
                {
                    b.HasOne("Kis.TaskTrecker.Api.Entity.Issue", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("Kis.TaskTrecker.Api.Entity.IssuePriority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Kis.TaskTrecker.Api.Entity.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Kis.TaskTrecker.Api.Entity.IssueState", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kis.TaskTrecker.Api.Entity.IssueComment", b =>
                {
                    b.HasOne("Kis.TaskTrecker.Api.Entity.Issue", "Issue")
                        .WithMany()
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Kis.TaskTrecker.Api.Entity.Issue")
                        .WithMany("Comments")
                        .HasForeignKey("IssueId1");

                    b.HasOne("Kis.TaskTrecker.Api.Entity.IssueState", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kis.TaskTrecker.Api.Entity.IssueMedia", b =>
                {
                    b.HasOne("Kis.TaskTrecker.Api.Entity.Issue", "Issue")
                        .WithMany("Medias")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kis.TaskTrecker.Api.Entity.IssueState", b =>
                {
                    b.HasOne("Kis.TaskTrecker.Api.Entity.Issue", "Issue")
                        .WithMany()
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kis.TaskTrecker.Api.Entity.IssueWorkflow", b =>
                {
                    b.HasOne("Kis.TaskTrecker.Api.Entity.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kis.TaskTrecker.Api.Entity.Project", b =>
                {
                    b.HasOne("Kis.TaskTrecker.Api.Entity.ProjectState", "ProjectState")
                        .WithMany()
                        .HasForeignKey("ProjectStateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kis.TaskTrecker.Api.Entity.ProjectMilestoneIssueRel", b =>
                {
                    b.HasOne("Kis.TaskTrecker.Api.Entity.Issue", "Issue")
                        .WithMany()
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Kis.TaskTrecker.Api.Entity.ProjectMilestone", "Milestone")
                        .WithMany("KeyIssues")
                        .HasForeignKey("MilestoneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kis.TaskTrecker.Api.Entity.ProjectWorkflow", b =>
                {
                    b.HasOne("Kis.TaskTrecker.Api.Entity.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
