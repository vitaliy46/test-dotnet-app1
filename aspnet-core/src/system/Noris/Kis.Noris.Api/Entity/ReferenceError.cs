using System;
using Kis.Base.Entity;
using Kis.Noris.Api.Constants;

namespace Kis.Noris.Api.Entity
{
    /// <summary>
    /// Описание ошибки, возникшей при обращении со справочником.
    ///  </summary>
    public class ReferenceError : EntityBase<Guid>
    {
        /// <summary>
        /// Идентификатор ошибки по которому определяется ее наличие
        /// среди ранее зарегистрированных.
        /// На его основе можно сопоставить две любые ошибки.
        /// Для двух типов ошибок он составной из имени типа справочника
        /// и кода записи. 
        /// </summary>
        public string Idenifier { get; set; }
        /// <summary>
        /// Наименование справочника для оператора АРМ. 
        /// </summary>
        public string ReferenceName { get; set; }

        /// <summary>
        /// Наименование типа справочника зарегистрированного в системе
        /// для разработчиков системы
        /// </summary>
        public string ReferenceTypeName { get; set; }

        /// <summary>
        /// Краткое человеко-читабельное описание ошибки. Может содержать
        /// код справочной записи или др. полезную информацию.
        /// О структуре описания можно договориться с оператором АРМ.
        /// В ошибках, связанных  с перекодировкой в это свойство добавляется информация о 
        /// мастер справочнике, на который перекодируется локальный справочник
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Наиболее полное описание ошибки при ее детальном просмотре.
        /// Может содержать сведения об проблемных записях при обновлении справочника
        /// или содержимое Exception и пр.
        /// </summary>
        public string FullDescription { get; set; }

        public ReferenceErrors Type { get; set; }

        /// <summary>
        /// Состояние ошибки
        /// </summary>
        public ReferenceErrorStates State { get; set; } = ReferenceErrorStates.New;

        /// <summary>
        /// Комметрарии, добавляемые сотрудниками при необходимости.
        /// Предлагается в первое время содержимое этого свойства структурировать в виде Xml файла,
        /// на тот случай если потребуется добавлять более одного комментария. Пока не
        /// видится насколько это свойство будет активно использовано для переписки.
        /// </summary>
        public string Comments { get; set; }
        
        /// <summary>
        /// Дата исправления ошибки
        /// </summary>
        public DateTime? FixDate { get; set; }

        /// <summary>
        /// Поле, в котором содержится различная важная информация об ошибке. Информация, ее формат и 
        /// семантика могут различаться в зависимости от типа ошибки
        /// </summary>
        public string ErrorData { get; set; }
    }
}
